AWSTemplateFormatVersion: "2010-09-09"
Description: Guidance for Low Latency High Throughput Model Inference using Amazon SageMaker(SO9419)
Parameters:
  UserProfileName:
    Type: String
    Description: "user profile name"
    Default: "DefaultUser"

Resources:

  SageMakerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  SageMakerInternetGw:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: SageMakerInternetGw
      VpcId:
        Ref: SageMakerVPC

  SageMakerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SageMakerVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  SageMakerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SageMakerVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'

  SageMakerRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SageMakerVPC

  SageMakerRoute:
    Type: AWS::EC2::Route
    DependsOn: SageMakerInternetGw
    Properties:
      RouteTableId:
        Ref: SageMakerRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: SageMakerInternetGw

  SageMakerSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SageMakerSubnet1
      RouteTableId:
        Ref: SageMakerRouteTable

  SageMakerSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SageMakerSubnet2
      RouteTableId:
        Ref: SageMakerRouteTable

  StudioDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      AuthMode: "IAM"
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
      DomainName: "StudioDomain"
      SubnetIds:
        - !Ref SageMakerSubnet1
        - !Ref SageMakerSubnet2
      VpcId: !Ref SageMakerVPC

  UserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !Ref StudioDomain
      UserProfileName: !Ref UserProfileName
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  StudioApp:
    Type: AWS::SageMaker::App
    DependsOn: UserProfile
    Properties:
      AppName: "default"
      AppType: "JupyterServer"
      DomainId: !Ref StudioDomain
      UserProfileName: !Ref UserProfileName


  SageMakerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "AmazonSageMaker-ExecutionRole-endtoendml"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess